package JavaCC;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

import JavaCC.JavaParser;
import JavaCC.JavaParserTreeConstants;
import JavaCC.JavaParserVisitor;
import JavaCC.Node;

public class SimpleNode implements Node {
    //anigno:09020054
    //change protected to public
    public Node parent;
    public Node[] children;
    public int id;
    public JavaParser parser;
    //anigno: 09020054

    //anigno 0804051831
    public String idString="";
    //anigno 0804051831

    //anigno:0802050050
    //added three members to hold node's tokens
    //will be changed on entry and exit of every node scope
    public Token firstToken;
    public Token lastToken;
    public Token otherToken;
    //anigno:0802050050

    //anigno:0804051800
    public String scope="";
    //anigno:0804051800



    public SimpleNode(int i) {
        id = i;
        //anigno 0804051831
        idString=JavaParserTreeConstants.jjtNodeName[id];
        //anigno 0804051831
    }

    public SimpleNode(JavaParser p, int i) {
        this(i);
        parser = p;
    }

    public void jjtOpen() {
    }

    public void jjtClose() {
    }

    public void jjtSetParent(Node n) { parent = n; }
    public Node jjtGetParent() { return parent; }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        } else if (i >= children.length) {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }

    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }

    /** Accept the visitor. **/
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    /** Accept the visitor. **/
    public Object childrenAccept(JavaParserVisitor visitor, Object data) {
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                children[i].jjtAccept(visitor, data);
            }
        }
        return data;
    }

    /* You can override these two methods in subclasses of SimpleNode to
    customize the way the node appears when the tree is dumped.  If
    your output uses more than one line you should override
    toString(String), otherwise overriding toString() is probably all
    you need to do. */

    //public String toString() { return JavaParserTreeConstants.jjtNodeName[id]; }
    //anigno 0804051815 toString() replaced
    public String toString(){
        String ret="";
        ret+=JavaParserTreeConstants.jjtNodeName[id];
        ret+=" ( "+firstToken.image;
        ret+=" , "+otherToken.image;
        ret+=" , "+lastToken.image+" )";
        ret+="("+scope+")";
        return ret;
    }//toString()
    //anigno 0804051815
    public String toString(String prefix) { return prefix + toString(); }

    /* Override this method if you want to customize how the node dumps
    out its children. */

    public void dump(String prefix) {
        System.out.print("("+this.firstToken.image+","+this.lastToken.image+")");
        System.out.println(toString(prefix));
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode)children[i];
                if (n != null) {
                    n.dump(prefix + "-|");
                }
            }
        }
    }
}

