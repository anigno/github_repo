<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" href="../../style.css"/>

<style type="text/css">
.style1 {
	text-align: center;
	font-size: xx-large;
}
.style2 {
	text-align: left;
	font-size: large;
}
.style3 {
	text-align: left;
	font-size: medium;
}
</style>
</head>

<body>

<table border="1">
	<tr>
		<td class="style1" colspan="2">Anigno Other projects</td>
	</tr>
	<tr>
		<td class="style2" style="width: 164px">AVL Rank Tree data structure</td>
		<td class="style2">an AVL tree is a self-balancing binary search tree, 
		and the first such data structure to be invented[citation needed]. In an 
		AVL tree the heights of the two child sub trees of any node differ by at 
		most one, therefore it is also called height-balanced. Lookup, 
		insertion, and deletion all take O(log n) time in both the average and 
		worst cases. Additions and deletions may require the tree to be 
		rebalanced by one or more tree rotations. (<a target="_blank" href="http://en.wikipedia.org/wiki/AVL_tree">wikipedia</a>)<br />
		AVL tree
		<a target="_blank" href="http://sky.fit.qut.edu.au/~maire/avl/System/AVLTree.html">
		algorithm</a><br />
		The addition rank property allows to get an element by it&#39;s index in a 
		tree.<br />
		The class is implemented in C++.<br />
		<a href="AvlRankTree.zip">Download</a></td>
	</tr>
	<tr>
		<td class="style2" style="width: 164px">Skip list data structure</td>
		<td class="style2">a skip list is a probabilistic data structure, based 
		on parallel linked lists, with efficiency comparable to a binary search 
		tree (order O(log n) average time for most operations).<br />
		Underlying the skip list is an augmentation of an ordered linked list 
		with additional forward links, added in a randomized way with a 
		geometric/negative binomial distribution (see William Pugh&#39;s original 
		paper), so that a search in the list may quickly skip parts of the list 
		(hence the name). Insert, search and delete operations are performed in 
		logarithmic randomized time. (<a href="http://en.wikipedia.org/wiki/Skip_list">wikipedia</a>)<br />
		<br />
		1<br />
		1---------&gt;4------&gt;6 <br />
		1-----&gt;3-&gt;4------&gt;6--------&gt;9 <br />
		1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9-&gt;10 <br />
		<a target="_blank" href="http://www.csee.umbc.edu/courses/undergraduate/341/fall01/Lectures/SkipLists/skip_lists/skip_lists.html">
		Algorithm and theory</a><br />
		<br />
		Implemented in C++ .<br />
		<a href="SkipList.zip">Download</a></td>
	</tr>
	<tr>
		<td class="style2" style="width: 164px">2-3-4 Tree data structure</td>
		<td class="style3">A 2-3-4 tree in computer science is a B-tree of order 
		4.<br />
		Like B-trees in general, 2-3-4 trees are a kind of self-balancing data 
		structure that can be used as a dictionary. They can search, insert and 
		delete in O(log n) time, where n is the number of elements in the tree.<br />
		2-3-4 trees are relatively difficult to implement in most programming 
		languages because of the large number of special cases involved in 
		operations on the tree. Red-black trees (see below) are simpler to 
		implement, so they tend to be used instead (<a target="_blank" href="http://en.wikipedia.org/wiki/2-3-4_tree">wikipedia</a>)<br />
		<img src="Images/2-3-4_tree_example.png" width="167" height="93" /><br />
		Implemented in C++ .<br />
		<a href="tree%20234.zip">Download</a></td>
	</tr>
	<tr>
		<td class="style2" style="width: 164px">Sorting algorithms</td>
		<td class="style2">Several sorting algorithms implemented in C++.<br />
		(Heap sort, Merge sort, Quick sort)<br />
		<a href="sort.zip">Download</a></td>
	</tr>
	<tr>
		<td class="style2" style="width: 164px">Loops optimizing</td>
		<td class="style2">Optimizing loop running by reusing calculation 
		results according to loop parameters. <br />
		when running loops that uses complex calculation and consume much time, 
		this optimization extract the loop parameters and calculation results 
		and store them in a balanced tree structure. the next time where an 
		already seen parameters are given to a loop, instead of running it 
		again, the results are taken from the storage and the application is 
		running faster. This could reduce complex calculation loops time. 
		(Tested result were more then 70%)<br />
		Implemented in JAVA.<br />
		<a href="javaOptimizer.zip">Download</a></td>
	</tr>
	<tr>
		<td class="style2" style="width: 164px">ADT implementation of a list</td>
		<td class="style2">The known C language ADT pattern implementation of a 
		list.<br />
		<a href="List_ADT_c.zip">Download</a></td>
	</tr>
	<tr>
		<td class="style2" style="width: 164px">Othello game</td>
		<td class="style2">Othello game (Net 1.1 is required) with source code.<br />
		<img src="Images/Iagno_Ubuntu_Gutsy.png" width="120" height="93" /><br />
		<a href="othello03.zip">Download</a></td>
	</tr>
	<tr>
		<td class="style2" style="width: 164px">Poker game</td>
		<td class="style2">Poker game for one player against three AI computer 
		players. (<a target="_blank" href="http://www.microsoft.com/downloads/details.aspx?FamilyID=bf9a24f9-b5c5-48f4-8edd-cdf2d29a79d5&amp;displaylang=en">VB 
		runtime required</a>) including With source code.<br />
		Implemented in Visual basic 6.<br />
		<a href="POKER.ZIP">Download</a> (<a target="_blank" href="http://www.microsoft.com/downloads/details.aspx?FamilyID=bf9a24f9-b5c5-48f4-8edd-cdf2d29a79d5&amp;displaylang=en">VB 
		runtime</a>)</td>
	</tr>
	<tr>
		<td class="style2" style="width: 164px">Rolette game</td>
		<td class="style2">Rolette game.&nbsp; (<a target="_blank" href="http://www.microsoft.com/downloads/details.aspx?FamilyID=bf9a24f9-b5c5-48f4-8edd-cdf2d29a79d5&amp;displaylang=en">VB 
		runtime required</a>) including source code.<br />
		<a href="roulette%20V2.zip">Download</a> (<a target="_blank" href="http://www.microsoft.com/downloads/details.aspx?FamilyID=bf9a24f9-b5c5-48f4-8edd-cdf2d29a79d5&amp;displaylang=en">VB 
		runtime</a>)</td>
	</tr>
	<tr>
		<td class="style2" style="width: 164px">The great snail race game</td>
		<td class="style2">The great snail race is a family gambling game where 
		you set your bets on a snail racing others. source code and installation 
		included.<br />
		Implemented in Visual basic 6.<br />
		<img alt="" src="Images/img3D.gif" width="160" height="122" /><br />
		<a href="theGreatSnailRace%20V2.zip">Download</a> (<a target="_blank" href="http://www.microsoft.com/downloads/details.aspx?FamilyID=bf9a24f9-b5c5-48f4-8edd-cdf2d29a79d5&amp;displaylang=en">VB 
		runtime</a>)</td>
	</tr>
	<tr>
		<td class="style2" style="width: 164px">&nbsp;</td>
		<td class="style2">&nbsp;</td>
	</tr>
	</table>


</body>

</html>
